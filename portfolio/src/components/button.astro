---
interface Item {
    title: string;
    bgColor: string; // Color de fondo dinámico
    hoverColor: string; // Color de fondo al pasar el cursor
    TextColor: string; // Color del texto
    hoverIconColorandText: string; // Color del ícono al pasar el cursor
    svgPath: string;
}

const { items } = Astro.props as { items: Item[] };
---

<style>
  .button {
    @apply flex items-center px-4 py-1 rounded-full transition-colors;
    color: var(--text-color); /* Color del texto */
    background-color: var(--bg-color); /* Color de fondo inicial */
    border: 2px solid rgba(0, 0, 0, 0.507);
  }

  .button:hover {
    background-color: var(--hover-bg-color); /* Color de fondo en hover */
    color: var(--hover-text-color); /* Color del texto en hover */
  }

  .icon {
    @apply w-5 h-5 mr-2 transition-colors;
    fill: var(--icon-color); /* Color del ícono inicial */
  }

  .button:hover .icon {
    fill: var(--hover-icon-color); /* Color del ícono en hover */
  }
</style>

<div class="relative mt-6 flex flex-wrap justify-center gap-4">
  {items.map(item => (
    <button
      class="button"
      style={{
        '--bg-color': item.bgColor,
        '--hover-bg-color': item.hoverColor,
        '--text-color': item.TextColor,
        '--icon-color': item.TextColor,
        '--hover-icon-color': item.hoverIconColorandText,
        '--hover-text-color': item.hoverIconColorandText
      }}
    >
      <svg
        viewBox="0 0 128 128"
        class="icon"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path d={item.svgPath} />
      </svg>
      {item.title}
    </button>
  ))}
</div>
