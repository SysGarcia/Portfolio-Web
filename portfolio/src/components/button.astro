---
interface Item {
    title: string;
    bgColor: string;
    hoverColor: string;
    TextColor: string;
    hoverIconColorandText: string;
    svgPath?: string;
    img?: string;
    category: string;
}

const { items } = Astro.props as { items: Item[] };

// Agrupar ítems por categoría
const categories = {
    'Desarrollo web': items.filter(item => item.category === 'Desarrollo web'),
    'Programación': items.filter(item => item.category === 'Programación'),
    'Sistema Operativo': items.filter(item => item.category === 'Sistema Operativo'),
    'Tecnologías': items.filter(item => item.category === 'Tecnologías'),
};
---

<style>
  .button {
    @apply flex items-center px-4 py-1 rounded-full transition-colors;
    color: var(--text-color);
    background-color: var(--bg-color);
    border: 2px solid rgba(0, 0, 0, 0.507);
    margin-top: 4px;
  }

  .button:hover {
    background-color: var(--hover-bg-color);
    color: var(--hover-text-color);
  }

  .icon {
    @apply w-5 h-5 mr-2 transition-colors;
    fill: var(--icon-color);
  }

  .button:hover .icon {
    fill: var(--hover-icon-color);
  }

  .img {
    @apply w-5 h-5 mr-2;
    filter: invert(30%);
  }

  .button:hover .img {
    filter: brightness(0%);
  }

  .container {
    @apply flex gap-x-20 gap-y-4;
  }

  .column {
    @apply flex flex-col;
  }

  .white_text {
        color: #fff;
      }

      .black_text {
        color: #0d0d0d;
      }
</style>

<div class="relative mt-6 flex flex-wrap justify-center container">
  {Object.keys(categories).map(category => (
    <div class="column">
      <h2 class="text-xl font-light mb-4 gap-x-4 black_text gap-y-4">{category}</h2>
      {categories[category].map(item => (
        <button
          class="button"
          style={{
            '--bg-color': item.bgColor,
            '--hover-bg-color': item.hoverColor,
            '--text-color': item.TextColor,
            '--icon-color': item.TextColor,
            '--hover-icon-color': item.hoverIconColorandText,
            '--hover-text-color': item.hoverIconColorandText
          }}
        >
          {item.svgPath ? (
            <svg
              viewBox="0 0 128 128"
              class="icon"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d={item.svgPath} />
            </svg>
          ) : item.img ? (
            <img
              src={item.img}
              alt={item.title}
              class="img"
            />
          ) : null}
          {item.title}
        </button>
      ))}
    </div>
  ))}
</div>
